function [g2]=q1b(image,n_var)
%inverse filtering
    %Error handling and using default image
    global H;
    error_handler(nargin);
    g2=adding_noise();
    g2=image;
    figure;imagesc(g2);colormap gray;title('gaussian lowpassed and gaussian noise added image');colorbar;
    
    %now applying inverse transfom on image g2
    g3=inverse_filter(g2,H);
    figure;imagesc(g3);colormap gray;title('gaussian lowpassed and gaussian noise added image');colorbar;
    
    function[g3]=inverse_filter(g2,H)
        G2=fft2(g2);G3=G2;
        [s1,s2]=size(G2);
        threshold=0.000001;
        for i=1:s1
            for j=1:s2
                if(abs(H(i,j))>threshold)
                    G3(i,j)=G2(i,j)/H(i,j);
                else
                    G3(i,j)=0;
                end
            end
        end
        g3=ifft2(G3);
    end
    
    function[]=error_handler(nargin)
        if(nargin==0)
           image=imread('CircleSquare.tif');
           n_var=0.05;
        elseif(nargin==1)
            n_var=0.05;
        end
        image=double(image);
    end
  
    function [g]=adding_noise()
            [s1,s2]=size(image);

            %defining filter size and filter variance
            f_size=10;f_var=0.05;
            h=fspecial('gaussian',f_size,f_var);
            
            %normalizing image
            imagemax=max(image(:));
            image=image/imagemax;
            figure;imagesc(image);colormap gray;title('original image');colorbar;

            % blurring the image
            %performing convolution in Fourier Domain
            F=fft2(image);H=fft2(h,s1,s2);
            G=F.*H;
            g=ifft2(G);
            %finding normalize image g
                g_max=max(g(:));
                g=g/g_max;
                
    end

    function[g]=adding_noise(g)
        g_max=max(g(:));
        g=g/g_max;
        g_mean=0;%gaussian mean value-not needed actually
            %adding noise
        g=imnoise(g,'gaussian',g_mean,n_var); 
    end
end